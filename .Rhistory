library("ggplot2")
library("dplyr")
library("parallel")
library("NBPSeq")
library("qvalue")
library("RNAsense")
library("SummarizedExperiment")
#important! the table for reading should have the following col.names: gene/genename(geneID and symble)/samples
#sample name following genotype(big letter)_rep(small letter)_time(1:8)
normalizedReads <- read.table("final_reads_for GEO.txt",header=TRUE,sep = "\t",fill = TRUE)#read normalized reads
getwd()
#important! the table for reading should have the following col.names: gene/genename(geneID and symble)/samples
#sample name following genotype(big letter)_rep(small letter)_time(1:8)
normalizedReads <- read.table("final_reads_for GEO.txt",header=TRUE,sep = "\t",fill = TRUE)#read normalized reads
hpf<-c(2.5,3,3.5,4,4.5,5,5.5,6)
genotype<-c("WT","MZsox","MZspg","MZsoxspg")
startTime <- Sys.time() # get start time
analyzeConditions <- c("MZspg","WT") #rename groups names
ini <- TRUE
# mydata is data in standard format
thCount <- 100
nrcores <- 1
FC = 2 #fold change
pValueSwitch = 0.15 # p value for switchlists
pValueFC=0.01 #p value for the fold change
experimentStepDetection = "MZspg" #switch list from which time series
#times <- list(c(2.5,3,3.5,4,4.5,5,5.5,6))
times <- c(2.5,3,3.5,4,4.5,5,5.5,6)
genotype1<-paste("^", analyzeConditions[1],"_",sep = "")
genotype2<-paste("^", analyzeConditions[2],"_",sep = "")
reads1<-normalizedReads[grepl(pattern = genotype1, names(normalizedReads))]
reads2<-normalizedReads[grepl(pattern = genotype2, names(normalizedReads))]
genenames<-normalizedReads[grepl(pattern = "name", names(normalizedReads))]
mydata <- cbind(genenames,reads1,reads2)
#cut with thCount
vec2Keep <- which(vapply(1:dim(mydata)[1],function(i) !Reduce("&",mydata[i,3:dim(mydata)[2]]<thCount), c(TRUE)))
mydata <- mydata[vec2Keep,]
genenames <- genenames[vec2Keep,]
#sort data
mydata<-arrange(mydata,name)
#transfer data to summarizedexperiment class
colnames <- names(mydata)[-c(1,2)]
mydataSE <- SummarizedExperiment(assays=SimpleList(mydata=as.matrix(mydata[,-c(1,2)])),
rowData = DataFrame(name=mydata$name, genename=mydata$genename),
colData = DataFrame(condition = do.call(rbind, strsplit(colnames, "_"))[,1],
time = do.call(rbind, strsplit(colnames, "_"))[,2],
replicate = do.call(rbind, strsplit(colnames, "_"))[,3],
row.names=colnames))
#getFC
resultFC <- RNAsense:::getFC(dataset = mydataSE, myanalyzeConditions = analyzeConditions, cores = nrcores, mytimes=times)
head(resultFC)
# generate and output vulcano plot
VULCANO<-ggplot(subset(resultFC, FCdetect!="none"), aes(x=logFoldChange, y=-log10(pValue), color=FCdetect)) + xlab("log2(Fold Change)") + geom_point(shape=20)
pdf(file = paste0(Sys.Date(), "_VULCANO_colorPlot.pdf"), width = 7, height = 6)
print(VULCANO)
dev.off()
# get Switch
#resultSwitch <- RNAsense:::getSwitch(dataset = mydataSE, experimentStepDetection = experimentStepDetection,
#pValueSwitch = pValueSwitch, cores = nrcores, mytimes = times)
resultSwitch <- RNAsense:::getSwitchCorrect(dataset = mydataSE, experimentStepDetection = experimentStepDetection,
pValueSwitch = pValueSwitch, cores = nrcores, mytimes = times,chooseFirst = TRUE)
getSwitchCorrect
library("RNAsense")
getSwitchCorrect
library("ggplot2")
library("dplyr")
library("parallel")
library("NBPSeq")
library("qvalue")
library("RNAsense")
library("SummarizedExperiment")
# get Switch
#resultSwitch <- RNAsense:::getSwitch(dataset = mydataSE, experimentStepDetection = experimentStepDetection,
#pValueSwitch = pValueSwitch, cores = nrcores, mytimes = times)
resultSwitch <- RNAsense:::getSwitchCorrect(dataset = mydataSE, experimentStepDetection = experimentStepDetection,
pValueSwitch = pValueSwitch, cores = nrcores, mytimes = times,chooseFirst = TRUE)
source('~/Dokumente/Modeling/testGao/example_mod3_from table result_new2-1.r', echo=TRUE)
library("RNAsense")
getSwitchCorrect
source('~/Dokumente/Modeling/testGao/example_mod3_from table result_new2-1.r', echo=TRUE)
head(resultCombined)
subset(resultCombined, genename=="zgc:165555")
head8(resultFC)
head(resultFC)
subset(resultFC, genename=="zgc:165555")
mydataSE
mydataSE[,colData(mydataSE)$time==t]
mydataSE[,colData(mydataSE)$genename=="zgc:1655"]
mydataSE[,colData(mydataSE)$genename=="zgc:165555"]
mydataSE[,rowData(mydataSE)$genename=="zgc:165555"]
rowData(mydataSE)$genename
count(rowData(mydataSE)$genename)
count(as.character(rowData(mydataSE)$genename))
"zgc:165555"%in%rowData(mydataSE)$genename
"zgc:165545"%in%rowData(mydataSE)$genename
which(rowData(mydataSE)$genename=="zgc:165555")
mydataSE[,rowData(mydataSE)$genename=="zgc:165555"]
mydataSE[,which(rowData(mydataSE)$genename=="zgc:165555")]
which(rowData(mydataSE)$genename=="zgc:165555")
mydataSE[rowData(mydataSE)$genename=="zgc:165555",]
which(rowData(mydataSE)$genename=="zgc:165555")
assays(mydataSE[rowData(mydataSE)$genename=="zgc:165555",])
assays(mydataSE[rowData(mydataSE)$genename=="zgc:165555",])[[1]]
mydataSE[rowData(mydataSE)$genename=="zgc:165555",]$name
as.dataframe(mydataSE[rowData(mydataSE)$genename=="zgc:165555",])name
as.dataframe(mydataSE[rowData(mydataSE)$genename=="zgc:165555",])$name
as.data.frame(mydataSE[rowData(mydataSE)$genename=="zgc:165555",])$name
rowData(mydataSE)$genename
rowData(mydataSE)$name
head(resultFC)
head(resultSwitch)
library("ggplot2")
library("dplyr")
library("parallel")
library("NBPSeq")
library("qvalue")
library("RNAsense")
library("SummarizedExperiment")
#important! the table for reading should have the following col.names: gene/genename(geneID and symble)/samples
#sample name following genotype(big letter)_rep(small letter)_time(1:8)
normalizedReads <- read.table("final_reads_for GEO.txt",header=TRUE,sep = "\t",fill = TRUE)#read normalized reads
hpf<-c(2.5,3,3.5,4,4.5,5,5.5,6)
genotype<-c("WT","MZsox","MZspg","MZsoxspg")
startTime <- Sys.time() # get start time
analyzeConditions <- c("MZspg","WT") #rename groups names
ini <- TRUE
# mydata is data in standard format
thCount <- 100
nrcores <- 1
nrcores <- 4
FC = 2 #fold change
pValueSwitch = 0.15 # p value for switchlists
pValueFC=0.01 #p value for the fold change
experimentStepDetection = "MZspg" #switch list from which time series
#times <- list(c(2.5,3,3.5,4,4.5,5,5.5,6))
times <- c(2.5,3,3.5,4,4.5,5,5.5,6)
genotype1<-paste("^", analyzeConditions[1],"_",sep = "")
genotype2<-paste("^", analyzeConditions[2],"_",sep = "")
reads1<-normalizedReads[grepl(pattern = genotype1, names(normalizedReads))]
reads2<-normalizedReads[grepl(pattern = genotype2, names(normalizedReads))]
genenames<-normalizedReads[grepl(pattern = "name", names(normalizedReads))]
mydata <- cbind(genenames,reads1,reads2)
#cut with thCount
vec2Keep <- which(vapply(1:dim(mydata)[1],function(i) !Reduce("&",mydata[i,3:dim(mydata)[2]]<thCount), c(TRUE)))
mydata <- mydata[vec2Keep,]
genenames <- genenames[vec2Keep,]
#sort data
mydata<-arrange(mydata,name)
#transfer data to summarizedexperiment class
colnames <- names(mydata)[-c(1,2)]
mydataSE <- SummarizedExperiment(assays=SimpleList(mydata=as.matrix(mydata[,-c(1,2)])),
rowData = DataFrame(name=mydata$name, genename=mydata$genename),
colData = DataFrame(condition = do.call(rbind, strsplit(colnames, "_"))[,1],
time = do.call(rbind, strsplit(colnames, "_"))[,2],
replicate = do.call(rbind, strsplit(colnames, "_"))[,3],
row.names=colnames))
#getFC
resultFC <- RNAsense:::getFC(dataset = mydataSE, myanalyzeConditions = analyzeConditions, cores = nrcores, mytimes=times)
head(resultFC)
source('~/Dokumente/Modeling/testGao/example_mod3_from table result_new2-1.r', echo=TRUE)
head(resultSwitch)
subset(resultCombined, genename=="zgc:165555")
head(resultFC)
as.data.frame(mydataSE[rowData(mydataSE)$genename=="zgc:165555",])$name
head(resultCombined)
resultCombined$FCdown
head(myresultFC)
head(resultFC)
source('~/Dokumente/Modeling/testGao/example_mod3_from table result_new2-1.r', echo=TRUE)
subset(resultCombined, genename=="zgc:165555")
source('/tmp/mozilla_marcus0/example_mod3_from table result_new3.r', echo=TRUE)
source('/tmp/mozilla_marcus0/example_mod3_from table result_new3-copy.r', echo=TRUE)
head(resultCombined)
source('~/Dokumente/Modeling/testGao/example_mod3_from table result_new2-1.r', echo=TRUE)
combineResults
head(resultFC)
resultCombined
# generate and output SSGS plot
pdf(file = paste0(Sys.Date(), "_SSGS_colorPlot.pdf"), width = 7, height = 6)
SSGS<-RNAsense:::plotSSGS(resultCombined, c(2.5,3,3.5,4,4.5,5,5.5,6), myanalyzeConditions = analyzeConditions)
print(SSGS)
dev.off()
resultCombined
library("ggplot2")
library("dplyr")
library("parallel")
library("NBPSeq")
library("qvalue")
library("RNAsense")
library("SummarizedExperiment")
#important! the table for reading should have the following col.names: gene/genename(geneID and symble)/samples
#sample name following genotype(big letter)_rep(small letter)_time(1:8)
normalizedReads <- read.table("final_reads_for GEO.txt",header=TRUE,sep = "\t",fill = TRUE)#read normalized reads
hpf<-c(2.5,3,3.5,4,4.5,5,5.5,6)
genotype<-c("WT","MZsox","MZspg","MZsoxspg")
startTime <- Sys.time() # get start time
analyzeConditions <- c("MZspg","WT") #rename groups names
ini <- TRUE
# mydata is data in standard format
thCount <- 100
nrcores <- 6
FC = 2 #fold change
pValueSwitch = 0.15 # p value for switchlists
pValueFC=0.01 #p value for the fold change
experimentStepDetection = "MZspg" #switch list from which time series
#times <- list(c(2.5,3,3.5,4,4.5,5,5.5,6))
times <- c(2.5,3,3.5,4,4.5,5,5.5,6)
genotype1<-paste("^", analyzeConditions[1],"_",sep = "")
genotype2<-paste("^", analyzeConditions[2],"_",sep = "")
reads1<-normalizedReads[grepl(pattern = genotype1, names(normalizedReads))]
reads2<-normalizedReads[grepl(pattern = genotype2, names(normalizedReads))]
genenames<-normalizedReads[grepl(pattern = "name", names(normalizedReads))]
mydata <- cbind(genenames,reads1,reads2)
#cut with thCount
vec2Keep <- which(vapply(1:dim(mydata)[1],function(i) !Reduce("&",mydata[i,3:dim(mydata)[2]]<thCount), c(TRUE)))
mydata <- mydata[vec2Keep,]
genenames <- genenames[vec2Keep,]
#sort data
mydata<-arrange(mydata,name)
#transfer data to summarizedexperiment class
colnames <- names(mydata)[-c(1,2)]
mydataSE <- SummarizedExperiment(assays=SimpleList(mydata=as.matrix(mydata[,-c(1,2)])),
rowData = DataFrame(name=mydata$genename, genename=mydata$name),
colData = DataFrame(condition = do.call(rbind, strsplit(colnames, "_"))[,1],
time = do.call(rbind, strsplit(colnames, "_"))[,2],
replicate = do.call(rbind, strsplit(colnames, "_"))[,3],
row.names=colnames))
#getFC
resultFC <- RNAsense:::getFC(dataset = mydataSE, myanalyzeConditions = analyzeConditions, cores = nrcores, mytimes=times)
head(resultFC)
source('~/Dokumente/Modeling/testGao/figures_talk.r', echo=TRUE)
resultSwitch
assays(mydataSE[,rowData(mydataSE)$genename=="slc35a5"])[[1]]
rowData(mydataSE)$genename=="slc35a5"]
rowData(mydataSE)$genename=="slc35a5"
mydataSE[,rowData(mydataSE)$genename=="slc35a5"]
which(rowData(mydataSE)$genename=="slc35a5")
assays(mydataSE[,which(rowData(mydataSE)$genename=="slc35a5")][[1]]
assays(mydataSE[,which(rowData(mydataSE)$genename=="slc35a5")][[1]])
mydataSE[,which(rowData(mydataSE)$genename=="slc35a5")]
assays(mydataSE[,which(rowData(mydataSE)$genename=="slc35a5")])
assays(mydataSE[,which(rowData(mydataSE)$genename=="slc35a5")])[[1]]
assays(mydataSE[,which(rowData(mydataSE)$genename=="slc35a5")])[[1]]
assays(mydataSE[which(rowData(mydataSE)$genename=="slc35a5"),])[[1]]
assays(mydataSE[which(rowData(mydataSE)$genename=="slc35a5"),which(colData(mydataSE)$condition=="WT")])[[1]]
assays(mydataSE[which(rowData(mydataSE)$genename=="slc35a5"),which(colData(mydataSE)$condition=="WT" & colData(mydataSE)$replicate=="B1")])[[1]]
head(resultSwitch)
assays(mydataSE[which(rowData(mydataSE)$genename=="slc35a5"),which(colData(mydataSE)$condition=="WT" & colData(mydataSE)$replicate=="B1")])[[1]][1,]
as.numeric(assays(mydataSE[which(rowData(mydataSE)$genename=="slc35a5"),which(colData(mydataSE)$condition=="WT" & colData(mydataSE)$replicate=="B1")])[[1]][1,])
do.call(rbind, lapply(c("slc35a5"), function(mygene){
data.frame(time = c(2.5,3,3.5,4,4.5,5,5.5,6),
value = as.numeric(assays(mydataSE[which(rowData(mydataSE)$genename==mygene),which(colData(mydataSE)$condition=="WT" & colData(mydataSE)$replicate=="B1")])[[1]][1,]),
genename = mygene)
}))
do.call(rbind, lapply(c("slc35a5"), function(mygene){
cbind(subset(resultSwitch, genename==mygene),
data.frame(time = c(2.5,3,3.5,4,4.5,5,5.5,6),
value = as.numeric(assays(mydataSE[which(rowData(mydataSE)$genename==mygene),which(colData(mydataSE)$condition=="WT" & colData(mydataSE)$replicate=="B1")])[[1]][1,])))
}))
do.call(rbind, lapply(c("slc35a5", "sox3"), function(mygene){
cbind(subset(resultSwitch, genename==mygene),
data.frame(time = c(2.5,3,3.5,4,4.5,5,5.5,6),
value = as.numeric(assays(mydataSE[which(rowData(mydataSE)$genename==mygene),which(colData(mydataSE)$condition=="WT" & colData(mydataSE)$replicate=="B1")])[[1]][1,])))
}))
head(resultSwitch)
do.call(rbind, lapply(c("slc35a5", "sox3", "sox2", "dap"), function(mygene){
cbind(subset(resultSwitch, genename==mygene),
data.frame(time = c(2.5,3,3.5,4,4.5,5,5.5,6),
value = as.numeric(assays(mydataSE[which(rowData(mydataSE)$genename==mygene),which(colData(mydataSE)$condition=="WT" & colData(mydataSE)$replicate=="B1")])[[1]][1,])))
}))
data_switchplot <- do.call(rbind, lapply(c("slc35a5", "sox3", "sox2", "dap"), function(mygene){
cbind(subset(resultSwitch, genename==mygene),
data.frame(time = c(2.5,3,3.5,4,4.5,5,5.5,6),
value = as.numeric(assays(mydataSE[which(rowData(mydataSE)$genename==mygene),which(colData(mydataSE)$condition=="WT" & colData(mydataSE)$replicate=="B1")])[[1]][1,])))
}))
ggplot(data_switchplot, aes(x=time, y=value)) + geom_point() + facet_wrap(~genename, scales="free")
ggplot(data_switchplot, aes(x=time, y=value)) +
geom_vline(data = data_switchplot, aes(y=timepoint)) +
geom_point() + facet_wrap(~genename, scales="free")
ggplot(data_switchplot, aes(x=time, y=value)) +
geom_vline(data = data_switchplot, aes(xintercept=timepoint)) +
geom_point() + facet_wrap(~genename, scales="free")
ggplot(data_switchplot, aes(x=time, y=value)) +
geom_vline(data = data_switchplot, aes(xintercept=timepoint)) +
geom_point() + facet_wrap(~genename, scales="free") + theme_dMod()
ggplot(data_switchplot, aes(x=time, y=value)) + geom_line() +
geom_vline(data = data_switchplot, aes(xintercept=timepoint), color="red") +
geom_point() + facet_wrap(~genename, scales="free") + theme_dMod() + xlab("Time [hpf]")
ggplot(data_switchplot, aes(x=time, y=value)) + geom_smooth() +
geom_vline(data = data_switchplot, aes(xintercept=timepoint), color="red") +
geom_point() + facet_wrap(~genename, scales="free") + theme_dMod() + xlab("Time [hpf]")
ggplot(data_switchplot, aes(x=time, y=value)) + geom_smooth() +
geom_vline(data = data_switchplot, aes(xintercept=timepoint, color=switch)) +
geom_point() + facet_wrap(~genename, scales="free") + theme_dMod() + xlab("Time [hpf]")
ggplot(data_switchplot, aes(x=time, y=value)) + geom_smooth(color="black", linetype="dashed") +
geom_vline(data = data_switchplot, aes(xintercept=timepoint, color=switch)) +
geom_point() + facet_wrap(~genename, scales="free") + theme_dMod() + xlab("Time [hpf]")
ggplot(data_switchplot, aes(x=time, y=value)) + geom_smooth(color="grey", linetype="dashed") +
geom_vline(data = data_switchplot, aes(xintercept=timepoint, color=switch)) +
geom_point() + facet_wrap(~genename, scales="free") + theme_dMod() + xlab("Time [hpf]")
head(resultSwitch)
resultSwitch[1:20,]
data_switchplot <- do.call(rbind, lapply(c("slc35a5", "sox3", "sox2", "dap", "thraa", "triob"), function(mygene){
cbind(subset(resultSwitch, genename==mygene),
data.frame(time = c(2.5,3,3.5,4,4.5,5,5.5,6),
value = as.numeric(assays(mydataSE[which(rowData(mydataSE)$genename==mygene),which(colData(mydataSE)$condition=="WT" & colData(mydataSE)$replicate=="B1")])[[1]][1,])))
}))
png(file = paste0(Sys.Date(), "_Switchplot.png"), width = 200, height = 200)
ggplot(data_switchplot, aes(x=time, y=value)) + geom_smooth(color="grey", linetype="dashed") +
geom_vline(data = data_switchplot, aes(xintercept=timepoint, color=switch)) +
geom_point() + facet_wrap(~genename, scales="free") + theme_dMod() + xlab("Time [hpf]")
dev.off()
ggplot(data_switchplot, aes(x=time, y=value)) + geom_smooth(color="grey", linetype="dashed") +
geom_vline(data = data_switchplot, aes(xintercept=timepoint, color=switch)) +
geom_point() + facet_wrap(~genename, scales="free") + theme_dMod() + xlab("Time [hpf]")
ggplot(data_switchplot, aes(x=time, y=value)) + geom_smooth(color="grey", linetype="dashed", fill=NA) +
geom_vline(data = data_switchplot, aes(xintercept=timepoint, color=switch)) +
geom_point() + facet_wrap(~genename, scales="free") + theme_dMod() + xlab("Time [hpf]")
png(file = paste0(Sys.Date(), "_Switchplot.png"), width = 200, height = 200)
ggplot(data_switchplot, aes(x=time, y=value)) + geom_smooth(color="grey", linetype="dashed", fill=NA) +
geom_vline(data = data_switchplot, aes(xintercept=timepoint, color=switch)) +
geom_point() + facet_wrap(~genename, scales="free") + theme_dMod() + xlab("Time [hpf]")
dev.off()
png(file = paste0(Sys.Date(), "_Switchplot.png"), width = 400, height = 400)
ggplot(data_switchplot, aes(x=time, y=value)) + geom_smooth(color="grey", linetype="dashed", fill=NA) +
geom_vline(data = data_switchplot, aes(xintercept=timepoint, color=switch)) +
geom_point() + facet_wrap(~genename, scales="free") + theme_dMod() + xlab("Time [hpf]")
dev.off()
png(file = paste0(Sys.Date(), "_Switchplot.png"), width = 400, height = 400)
ggplot(data_switchplot, aes(x=time, y=value)) + geom_smooth(color="grey", linetype="dashed", fill=NA) +
geom_vline(data = data_switchplot, aes(xintercept=timepoint, color=switch)) +
geom_point() + facet_wrap(~genename, scales="free") + theme_dMod() + xlab("Time [hpf]") + theme(legend.position = "bottom")
dev.off()
png(file = paste0(Sys.Date(), "_Switchplot.png"), width = 500, height = 400)
ggplot(data_switchplot, aes(x=time, y=value)) + geom_smooth(color="grey", linetype="dashed", fill=NA) +
geom_vline(data = data_switchplot, aes(xintercept=timepoint, color=switch)) +
geom_point() + facet_wrap(~genename, scales="free") + theme_dMod() + xlab("Time [hpf]") + theme(legend.position = "bottom")
dev.off()
source('~/Dokumente/Modeling/testGao/figures_thesis.r', echo=TRUE)
